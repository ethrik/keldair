#!/usr/bin/env perl
# Copyright 2011 Ethrik Project, et al.
# Licensed under the 3-clause BSD.
use strict;
use warnings;
use FindBin qw($Bin);
use POSIX qw(BUFSIZ);
use Getopt::Long;
use Config::JSON;
use feature qw(say);
my $pid = $$;

BEGIN
{
    unshift @INC, "$Bin/../lib" if $Bin ne "/usr/bin";
    unshift @INC, "$ENV{HOME}/.keldair/lib" if $Bin eq "/usr/bin";
    local $0 = 'keldair';
    my $pidf = "$Bin/../etc/keldair.pid";
    $pidf = $ENV{HOME}."/.keldair/keldair.pid" if $Bin eq "/usr/bin";
    open (my $pidfile, '>', $pidf)
        or die("Cannot open pidfile $pidf");
    print {$pidfile} $$;
    close $pidfile or die("Cannot close pidfile.\n");
}

use Keldair;
use Keldair::CoreCommands;
use Keldair::Module::Help;
use Keldair::State;
use Keldair::Module::Alias;

our ($dbug, $cfile);
GetOptions("debug!" => \$dbug, "config=s" => \$cfile);
$keldair->debug($dbug) if defined $dbug;
$cfile = $Bin eq "/usr/bin/" ? "$ENV{HOME}/.keldair/keldair.conf" : "$Bin/../etc/keldair.conf" if !$cfile;
$keldair->conf(Config::JSON->new($cfile));

open STDIN, '<', '/dev/null' or die( "Can't read /dev/null: $!" ) unless $^O eq 'MSWin32' or $keldair->debug;
open STDOUT, '>>', '/dev/null' or die( "Can't write to /dev/null: $!" ) unless $^O eq 'MSWin32' or $keldair->debug;
open STDERR, '>>', '/dev/null' or die( "Can't write to /dev/null: $!" ) unless $^O eq 'MSWin32' or $keldair->debug;
fork and exit unless $^O eq 'MSWin32' or $keldair->debug; # This cannot be compressed into one, you have to break it into a few lines. We will never reach $keldair->debug

our $VERSION = $Keldair::VERSION;

our %STATS;
$STATS{'start'} = time;

my $modules = $keldair->config('modules');
$keldair->modload($_) foreach @{ $modules };
$keldair->hook_run('OnStart');
$keldair->hook_run('OnRehash');
my $manager = $keldair->manager;

foreach (keys %{ $keldair->config('servers') }) {
	if ($keldair->config("servers/$_/autoconnect")) {
		$keldair->manager->add(name => $_, addr => $keldair->config("servers/$_/address"), port => $keldair->config("servers/$_/port"));
	}
}

while (1) {
    foreach my $sock ($keldair->manager->{selector}->can_read(1)) {
        my $network;
        foreach (keys %{$keldair->manager->{sockets}}) {
            if ($keldair->manager->{sockets}->{$_} eq $sock) { $network = $_; }
	}
        my $buffer;
        recv $sock, $buffer, BUFSIZ, 0;
        while ($buffer =~ s/(.*\n)//) {
	    $STATS{$network}{'inL'}++;
	    if ($STATS{$network}{'inL'} == 1) { $keldair->hook_run('OnPreConnect' => $network); }
            my $line = $1;
            $STATS{'inB'} += length($line);
            $line =~ s/(\r\n)//g;
            say "<$network> R: $line" if $keldair->debug;
            $keldair->parse($network, $line);
        }
    }
}

#$keldair->hook_run('OnDisconnect');

# Kill the first PID we had
# I think that by saying 'local', we do not recieve the desired effect here ... - miniCruzer
$SIG{CHLD} = sub {
    print "CHLD - KILLING $pid\n";
    kill(TERM => $pid);
};

$SIG{TERM} = sub {
    $keldair->quit('Caught SIGTERM, exiting.');
    $keldair->log(INFO => 'Caught SIGTERM, exiting.', 1);
};

$SIG{INT} = sub {
    $keldair->quit('Caught SIGINT, exiting.');
    $keldair->log(INFO => 'Caugt SIGINT, exiting.', 1);
};

END
{
    $keldair->hook_run('OnEnd');
    my $pidf = "$Bin/../etc/keldair.pid";
    $pidf = $ENV{HOME}."/.keldair/keldair.pid" if $Bin eq "/usr/bin";
    unlink $pidf;
    $keldair->log(INFO => 'Keldair shutdown complete; closing errors: '.($@ ? $@ : 'none'));
}
